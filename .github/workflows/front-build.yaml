name: Docker Build and Push
on:
  workflow_call:
    inputs:
      tag:
        required: true
        type: string
      project_name:
        required: true
        type: string
      mode:
        description: 'yarn mode parameter'
        required: true
        default: 'development'
        type: string
      environment:
        description: 'environment where the service will be deployed'
        required: true
        default: 'stg'
        type: string
      dockerfile:
        required: false
        type: string
        default: "Dockerfile"
    secrets:
      GOOGLE_CREDENTIALS:
        required: false
      GCR_REGISTRY:
        required: false
      GH_PAT:
        required: true
      VAULT_TOKEN:
        required: true
      NPM_TOKEN:
        required: true
      PRITUNL_PROFILE_FILE:
        required: true
      AWS_REGION:
        required: true
      SPZ_HISTORY_WIF:
        required: false
jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
        - name: Checkout
          uses: actions/checkout@v2

        - name: Setup Pritunl Profile and Start VPN Connection
          id: pritunl-connection
          uses: nathanielvarona/pritunl-client-github-action@v1.1.3
          with:
            profile-file: ${{ secrets.PRITUNL_PROFILE_FILE }}
                
        - name: Get Global Secrets
          id: global-secrets
          uses: bjerkio/vault-action@v1.0.2
          with:
            endpoint: "https://vault.services.spazious.com"
            path: "ci/global"
            authMethod: token
            token: ${{ secrets.VAULT_TOKEN }}
  
        - uses: mskelton/setup-yarn@v1
          env:
            NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          with:
            node-version: '18.x'

        - name: Securirity Scan
          env:
            NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          continue-on-error: true
          run: yarn audit

        - name: Setup Vault Cli
          uses: eLco/setup-vault@v1
          with:
            version: '~1.9.2'
          
        - name: Create .env
          env:
            VAULT_ADDR: "https://vault.services.spazious.com"
            VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
          run: |
            vault kv get -format yaml -field=data "ci/${{ inputs.project_name }}/${{ inputs.environment }}"| sed 's/: /=/' > .env
        
        - name: Setup AWS ECR Details STG
          if: "${{ inputs.environment == 'stg' || inputs.environment == 'v3'  }}"
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{secrets.AWS_REGION}}
      

  
        - name: Setup AWS ECR Details PRD
          if: "${{ inputs.environment == 'prd' || inputs.environment == 'v3-prd' }}"
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PRD }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PRD }}
            aws-region: ${{secrets.AWS_REGION}}

        - name: Login to Amazon ECR
          id: login-pf-aws-ecr
          uses: aws-actions/amazon-ecr-login@v1

        - name: Build and push the tagged docker image to Amazon ECR
          env:
            ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
            TARGET: ${{ inputs.mode }}
            ENVIRONMENT: ${{ inputs.environment}}
            NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
            SPZ_HISTORY_WIF: ${{ secrets.SPZ_HISTORY_WIF }}
            REACT_APP_API: https://api."${{ inputs.environment }}".services.spazious.com/api/v2/
            SPZ_APP_NEW_BOOKING_HOTEL_CHAINS: booking
          run: |
            DOCKER_BUILDKIT=1 docker build -f ${{ inputs.dockerfile }} --build-arg SPZ_APP_NEW_BOOKING_HOTEL_CHAINS=$SPZ_APP_NEW_BOOKING_HOTEL_CHAINS --build-arg SPZ_APP_3D_PREFIX=${{ inputs.environment }}. --build-arg REACT_APP_API=$REACT_APP_API --build-arg SPZ_HISTORY_WIF=$SPZ_HISTORY_WIF --build-arg NPM_TOKEN=$NPM_TOKEN --build-arg SRC=$TARGET -t $ECR_REGISTRY/${{ inputs.project_name }}:${{ inputs.tag }} .
            docker push $ECR_REGISTRY/${{ inputs.project_name }}:${{ inputs.tag }}
            docker login -u _json_key --password ${{ secrets.GOOGLE_CREDENTIALS }} https://gcr.io
            docker tag $ECR_REGISTRY/${{ inputs.project_name }}:${{ inputs.tag }} ${{ secrets.GCR_REGISTRY }}/${{ inputs.project_name }}:${{ inputs.tag }}
            docker push ${{ secrets.GCR_REGISTRY }}/${{ inputs.project_name }}:${{ inputs.tag }}

        - name: Build and push Docker image
          uses: docker/buildx-push-action@v3
          with:
            dockerfile: ${{ inputs.dockerfile }}
            username: _json_key
            password: ${{ secrets.PRD_DOCKER_PASSWORD }}
            registry: gcr.io
            repository: ${{ steps.config.outputs.project }}/${{ github.event.repository.name }}-bc-${{ steps.config.outputs.bc_name}}
            tags: ${{ steps.config.outputs.tag }}
            build-args:
              - SPZ_APP_NEW_BOOKING_HOTEL_CHAINS: booking
              - SPZ_APP_3D_PREFIX: ${{ inputs.environment }}.
              - REACT_APP_API: "https://api.'${{ inputs.environment }}'.services.spazious.com/api/v2/"
              - SPZ_HISTORY_WIF: ${{ secrets.SPZ_HISTORY_WIF }}
              - NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
              - SRC: ${{ inputs.mode }}